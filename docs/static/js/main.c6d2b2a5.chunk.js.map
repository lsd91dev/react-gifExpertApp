{"version":3,"sources":["services/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/AddCategory.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","useState","loading","state","setState","useEffect","then","imgs","setTimeout","console","log","useFetchGifs","AddCategory","setCategories","inputValue","setInputValue","onSubmit","e","preventDefault","length","categories","type","value","onChange","target","GifExpertApp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"4NAGiBA,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAIII,MAAOF,GAJX,cAIbG,EAJa,gBAKIA,EAASC,OALb,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAeZM,GAfY,4CAAH,sD,OCCXO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACrC,OACI,sBAAKc,UAAU,yDAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,sCAAUA,SCATO,EAAU,SAAC,GAAmB,IAAhBnB,EAAe,EAAfA,SAAe,ECHd,SAAEA,GAAe,IAAD,EAEZoB,mBAAS,CACjCb,KAAM,GACNc,SAAS,IAJ2B,mBAEhCC,EAFgC,KAEzBC,EAFyB,KAsBxC,OAfAC,qBAAW,WAEPzB,EAAUC,GAAWyB,MAAM,SAAAC,GACvBC,YAAY,WACRC,QAAQC,IAAIH,GACZH,EAAS,CACLhB,KAAMmB,EACNL,SAAS,MAEf,WAGP,CAACrB,IAGGsB,EDhBwBQ,CAAc9B,GAAjCa,EAH0B,EAG/BN,KAAac,EAHkB,EAGlBA,QAEpB,OACI,qCACA,mCAAOrB,KAGqFqB,GAAW,8CACpG,qBAAKL,UAAU,YAAf,SACOH,EAAOJ,KAAI,SAAAC,GACT,OAAO,cAAC,EAAD,eAAgCA,GAAbA,EAAIC,a,OEiBnCoB,EAjCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACDZ,mBAAS,IADR,mBAC/Ba,EAD+B,KACnBC,EADmB,KAsBvC,OACI,sBAAMC,SAfW,SAACC,GAClBA,EAAEC,iBAEuB,IAAtBJ,EAAWK,QAKVN,GAAe,SAACO,GAAD,OAAiBN,GAAjB,mBAAgCM,QAOnD,SACI,uBAAOC,KAAK,OAAOC,MAAOR,EAAYS,SArB1B,SAACN,GACjBF,EAAeE,EAAEO,OAAOF,QAoBwC9B,GAAG,YCa5DiC,EArCa,WAAM,MAGQxB,mBAAS,CAAC,cAHlB,mBAGtBmB,EAHsB,KAGVP,EAHU,KAc9B,OACI,qCACI,gDACA,uBACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEQO,EAAW9B,KACX,SAACT,GAAD,OAMI,aALJ,CAKK,EAAD,CAA0BA,SAAYA,GAAvBA,YCrBxB6C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.c6d2b2a5.chunk.js","sourcesContent":["    // Aquí haremos las peticiones http \r\n\r\n    // en mi solución recibo setImages y lo añado\r\n    export const getGifs = async (category) => {\r\n\r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category) }&api_key=8pyHN7FvL8QLGvPP22arDUrB1LGfjV3T&limit=10`;\r\n\r\n        const response = await fetch( url );\r\n        const { data } = await response.json(); // desestructuración\r\n\r\n        const gifs = data.map( img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url // si añadimos un signo de '?' en el objeto, esclarecemos que es opcional, así que si es null / undefined, no nos la dará\r\n            }\r\n        })\r\n\r\n        return gifs\r\n\r\n    }","import React from 'react'\r\n\r\n// ...y  como aquí recibimos el objeto img mandado mediante el operador Spread, podemos volver a desestructurarlo:\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn animate__faster\">\r\n            <img src={ url } alt={ title }/>\r\n            <small> { title }</small>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react' \r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\n// useEffect permite ejecutar código bajo unas condiciones que nosotros establezcamos\r\n\r\n// recibimos la categoría del gif que el usuario desea buscar\r\nexport const GifGrid = ( { category }) => {\r\n \r\n    // En la desestructuración podemos renombrar los elementos utilizando :nuevo_nombre\r\n    const {data:images, loading} = useFetchGifs( category );\r\n    \r\n    return (\r\n        <>\r\n        <h3> { category }</h3>\r\n\r\n        \r\n        { /* Es como un operador ternario pero sin necesidad de especificar un null cuando sea : */ loading && <p> Cargando... </p> } \r\n        {  <div className=\"card-grid\">\r\n                { images.map(img => {\r\n                    return <GifGridItem key={ img.id } {...img } /> // cuando mandas un objeto a un componente, también se puede utilizar el operador Spread, de manera que se envíen de una manera más sintética. Es decir: en vez de enviarse como: img{ img: { dato, dato, dato }}} se envían como img { dato, dato, dato }\r\n                })}\r\n            </div>  }\r\n        </>\r\n    )\r\n} // Cuando se importe en otro componente, hará falta escribirlo entre llaves: { } porque se exporta no por default sino directamente y parece ser que afecta\r\n","// Esto es un custom hook\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { getGifs } from '../services/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [ state, setState ] = useState({\r\n        data: [],\r\n        loading: true\r\n    }) \r\n    // useEffect recibe una función, que es la que yo quiero ejecutar.\r\n    useEffect( () => {\r\n        // getGifs(category, setImages); mi solución\r\n        getGifs ( category ).then( imgs => {\r\n            setTimeout( () => {\r\n                console.log(imgs)\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            },1500)\r\n        })\r\n\r\n    }, [category]) // [ ] indica las condiciones bajo las cuales se dispare nuestra función. Si está vacío, es que solo se dispara una vez (cuando el componente es renderizado por primera vez)\r\n\r\n\r\n    return state; // state es { data: [ ], loading: true }\r\n}","import React, {useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n// Recuerda: desfragmentar los argumentos que te llegan por props\r\nconst AddCategory = ({ setCategories }) => {\r\n    const [ inputValue, setInputValue ] = useState(''); // no debe de quedarse useSate() porque entonces lo registra como undefined. \r\n\r\n    const handleInput = (e) => {\r\n        setInputValue( e.target.value );\r\n    }\r\n\r\n    // Otra solución puede ser mandar las categorías desde el GifExpertApp (esa fue la que hice yo) como una property del componente\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(inputValue.length !== 0){\r\n            // coloca el nuevo valor al final del array: setCategories ((categories) => [... categories, inputValue])\r\n            // solución Udemy\r\n\r\n            // lo coloca al principio\r\n            setCategories( (categories) => [inputValue, ...categories]) \r\n        }\r\n        \r\n\r\n    }\r\n // Si tenemos un único elemento web que agrupa todos los elementos de nuestro componente, no necesitamos el Fragment\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\" value={inputValue} onChange={handleInput}id=\"text\"></input>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired // para indicar que un properties debe de ser una función, se especifica así\r\n}\r\n\r\nexport default AddCategory // Cuando se importe, no hace falta poner { } porque en el export default se exporta solo UNO\r\n","import React, {useState} from 'react'\r\nimport {GifGrid} from './components/GifGrid';\r\nimport AddCategory from './components/AddCategory';\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    // const categories = ['One punch', 'Samurai X', 'Dragon Ball']\r\n    const [ categories, setCategories ] = useState(['One punch']);\r\n\r\n    /*\r\n    const handleAdd = () => {\r\n        // [... X, ] se llama Operador Spread\r\n        setCategories( [... categories, 'Shokugeki no Soma']) // se añade al final\r\n        // setCategories ( 'Shokugeki no Soma', [ ...categories]); // se añade al principio\r\n\r\n    }\r\n    */\r\n\r\n    return (\r\n        <>\r\n            <h2> GifExpertApp </h2>\r\n            <hr />\r\n            <AddCategory setCategories={ setCategories } />\r\n            <ol>\r\n                {\r\n                    categories.map( \r\n                    (category) => \r\n                    /* {\r\n                    // imprime un elemento <li></li>  por cada elemento en el array\r\n                    return <li key={ category }> { category } </li>\r\n                    }) // Nota: no podemos usar el index como key del li porque si se elimina el elemento, el index quedaría como la key pero sin ese elemento adscrito y está mal */\r\n               \r\n                        <GifGrid key={ category } category= { category } />\r\n                    )\r\n                }\r\n               \r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}